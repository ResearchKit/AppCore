ResearchKit
===========

ResearchKit is an open source software framework that makes it easy to
create apps for medical or other research projects.

* Getting Started: [Getting Started](#gettingstarted)
* Documentation: [Programming Guide] [API]
* Best practices: [Best Practices]
* Contributing to ResearchKit: [Contributing]
* BSD License: [License](#license)


Use cases
===========

A task in ResearchKit contains a set of steps to present to a
user. Everything, whether the informed consent process, surveys, or
active tasks, is represented as a task that can be presented with a
task view controller.


Informed Consent
----------------

ResearchKit provides visual consent templates that you can customize
to explain the details of your study and obtain a signature that meets
your IRB or ethics committee's specific requirements. [Informed Consent]


Surveys
-------

ResearchKit provides a pre-built user interface for surveys, that can
be presented modally on an iPhone, iPod Touch, or iPad. [Surveys]


Active Tasks
------------

Some studies may need data beyond survey questions or the passive data
collection capabilities of HealthKit and CoreMotion
APIs. ResearchKit's active tasks invite users to perform activities
under semi-controlled conditions, while iPhone sensors actively
collect data. [Active Tasks]


Getting started<a name="gettingstarted"></a>
===============


Requirements
------------

The primary ResearchKit codebase supports iOS and requires Xcode 6.2
or newer. ResearchKit has a Base SDK version of 8.0, meaning that apps
using ResearchKit can run on devices with iOS 8.0 or newer.


Installation
------------

ResearchKit can be cloned with

```
git clone <repo>
```

Building
--------

Build ResearchKit by opening `ResearchKit.xcodeproj` and running the
`ORKDemo` target. This builds and runs the ResearchKit developers'
test application.

Adding ResearchKit to your App
------------------------------

This walk-through shows how to embed ResearchKit in your app as a
dynamic framework, and present a simple task view controller.

###1. Add ResearchKit to Your Project

To get started, drag ResearchKit.xcodeproj from your checkout into
your iOS app project in Xcode.

<center>
<figure>
  <img src="wiki/AddingResearchKitXcode.png" width="50%" alt="Adding ResearchKit " align="middle"/>
   <figcaption>  <center>Adding ResearchKit project </center></figcaption>
</figure>
</center>

Then, embed ResearchKit as a dynamic framework in your app, by adding
it to the Embedded Binaries section of the General pane for your
target as shown in the figure below.

<center>
<figure>
  <img src="wiki/AddedBinaries.png" width="100%" alt="Add ResearchKit to Embedded Binaries" align="middle"/>
   <figcaption><center>Add ResearchKit to Embedded Binaries</center></figcaption>
</figure>
</center>

###2. Create a Step

In this walk-through, we will use ResearchKit to modally present a
simple single-step task showing only an instruction.

Create a step for your task by adding some code, perhaps in
`viewDidAppear:` of an existing view controller. To keep things
simple, we'll use an instruction step (`ORKInstructionStep`) and name
the step `myStep`.

```objc 	
ORKInstructionStep *myStep =
  [[ORKInstructionStep alloc] initWithIdentifier:@"intro"];
myStep.title = @"Welcome to ResearchKit";
```

###3. Create a Task

Use the ordered task class (`ORKOrderedTask`) to create a task that
contains myStep. An ordered task is just a task where the order and
selection of later steps does not depend on the results of earlier
ones. Name your task `task` and initialize it with `myStep`.

```objc
ORKOrderedTask *task =
  [[ORKOrderedTask alloc] initWithIdentifier:@"task" steps:@[myStep]];
```

###4. Present the Task

Create a task view controller (`ORKTaskViewController`) and initialize
it with your `task`. A task view controller manages a task and collects the
results of each step. In this case, your task view
controller simply displays your instruction step.

```objc
ORKTaskViewController *taskViewController =
  [[ORKTaskViewController alloc] initWithTask:task taskRunUUID:nil];
taskViewController.delegate = self;
[self presentViewController:taskViewController animated:YES completion:nil];
```

The above snippet assumes that your class implements the
`ORKTaskViewControllerDelegate` protocol. This has just one required method,
which you must implement in order to handle the completion of the task:

```objc
- (void)taskViewController:(ORKTaskViewController *)taskViewController
       didFinishWithResult:(ORKTaskViewControllerResult)result
                     error:(ORK_NULLABLE NSError *)error {

    ORKTaskResult *taskResult = [taskViewController result];
    // You could do something with the result here.

    // Then, dismiss the task view controller.
    [self dismissViewControllerAnimated:YES completion:nil];
}
```

 
If you now run your app, you should see your first ResearchKit
instruction step:

<center>
<figure>
  <img src="wiki/HelloWorld.png" width="50%" alt="HelloWorld" align="middle"/>
   <figcaption>  <center>HelloResearchWorld app screen </center></figcaption>
</figure>
</center>



What else can ResearchKit do?
-----------------------------

The ResearchKit `Catalog.swift` demo app is a good place to
start. Find the project in ResearchKit's `Demos` directory. This
project includes a list of all the types of step supported by
ResearchKit in one tab, and displays a browser for the results of the
last completed task in the other tab.



License<a name="license"></a>
=======

```
Copyright (c) 2015, Apple Inc. All rights reserved.
 
Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:
 
1.  Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
 
2.  Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.
 
3. Neither the name of the copyright holder(s) nor the names of any contributors
may be used to endorse or promote products derived from this software without
specific prior written permission. No license is granted to the trademarks of
the copyright holders even if such marks are included in this software.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
```