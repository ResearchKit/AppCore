/*
 Copyright (c) 2015, Apple Inc. All rights reserved.
 
 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:
 
 1.  Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 
 2.  Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation and/or
 other materials provided with the distribution.
 
 3.  Neither the name of the copyright holder(s) nor the names of any contributors
 may be used to endorse or promote products derived from this software without
 specific prior written permission. No license is granted to the trademarks of
 the copyright holders even if such marks are included in this software.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#import <Foundation/Foundation.h>
#import <ResearchKit/ORKDefines.h>
#import <ResearchKit/ORKStep.h>
#import <ResearchKit/ORKResult.h>

ORK_ASSUME_NONNULL_BEGIN

/**
 `ORKTaskProgress` is a structure representing how far a task has progressed.
 
 It is returned by objects implementing the `ORKTask` protocol to indicate
 to the task view controller how far the task has progressed.
 
 Note that steps in a task are never accessed using the values in `ORKTaskProgress`.
 These values are only used for display.
 */
typedef struct {
    /// The index of the current step, starting from zero.
    NSUInteger current;
    
    /// The total number of steps in the task.
    NSUInteger total;
} ORKTaskProgress ORK_AVAILABLE_DECL;

/**
 Constructor for the `ORKTaskProgress structure.
 
 @param current   The index of the current step, starting from zero.
 @param total     The total number of steps
 
 @return Returns an `ORKTaskProgress` structure with the `current` and `total` values.
 */
ORK_EXTERN ORKTaskProgress ORKTaskProgressMake(NSUInteger current, NSUInteger total) ORK_AVAILABLE_DECL;

/**
 The `ORKTask` protocol defines a task to be carried out by a participant
 in a research study. To present ResearchKit UI in your app, instantiate an
 object that implements the `ORKTask` protocol, such as `ORKOrderedTask`, and
 provide it to an `ORKTaskViewController`.
 
 Implement this protocol to enable dynamic selection of the steps for a given task.
 For simple sequential tasks, `ORKOrderedTask` implements this protocol.
 
 Each step (`ORKStep`) in a task roughly corresponds to one "screen", and is the
 primary unit of work in any task presented with `ORKTaskViewController`. For example,
 an `ORKQuestionStep` corresponds to having a single question presented on screen,
 together with controls with which to answer. An `ORKFormStep` corresponds to a single
 screen with multiple questions, such as first and last name, plus birthdate.
 
 Some steps may produce multiple screens -- for example, `ORKVisualConsentStep` and
 `ORKConsentReviewStep` do this. However, each step still only corresponds to a single
 `ORKStepViewController`, which may manage child view controllers in a particular
 sequence.
 */
ORK_AVAILABLE_DECL
@protocol ORKTask <NSObject>

@required
/**
 Identifier for this task.
 
 This should be a short string which identifies the task, and will be copied
 onto any `ORKTaskResult` objects generated by the task view controller for this
 task. You may choose to use a human-readable string for the task identifier,
 or a UUID -- the particular string you use will depend on your application.
 
 In some applications, where tasks come from a server, it may be a unique
 identifier for the task in an external database.
 
 The task view controller uses this identifier when constructing the task result.
 This identifier can also be used during UI state restoration to identify what
 task needs to be restored.
 */
@property (nonatomic, copy, readonly) NSString *identifier;

/**
 Returns the step after a step, if there is one.
 
 Use the result to determine the next step.
 
 The task view controller calls this method to determine what step to display
 after this one. Each time the result changes, it may call this method again,
 in case the change in result has changed what steps are available.
 
 It is possible, by incorrect implementation of this method, to create extremely
 confusing sequences of steps. If in doubt, use `ORKOrderedTask`.
 
 @param step             Reference step. A `nil` step is a request for the first step.
 @param result   Snapshot of the current set of results, for context.
 
 @return Returns the step after the reference step, or `nil` if none.
 */
- (ORK_NULLABLE ORKStep *)stepAfterStep:(ORK_NULLABLE ORKStep *)step withResult:(ORKTaskResult *)result;

/**
 Returns the step before a step, if there is one.
 
 Returning `nil` can be used to prevent the user being able to navigate back to a
 previous step.
 
 The task view controller calls this method to determine what step to display
 before this one. Each time the result changes, it may call this method again,
 in case the change in result has changed what steps are available.
 
 It is possible, by incorrect implementation of this method, to create extremely
 confusing sequences of steps. If in doubt, use `ORKOrderedTask`.
 
 @param step             Reference step. A `nil` step is a request for the last step.
 @param result   Snapshot of the current set of results, for context.
 
 @return Returns the step before the reference step, or `nil` if none.
 */
- (ORK_NULLABLE ORKStep *)stepBeforeStep:(ORK_NULLABLE ORKStep *)step withResult:(ORKTaskResult *)result;

@optional

/**
 Returns the step matching the provided identifier.
 
 Implementing this method allows state restoration of a task
 to the particular step. Without this, `ORKTaskViewController` can only restore
 to the first step of the task.
 
 @param identifier  The identifier of the step to return.
 
 @return Returns the step matching the provided identifier.
 */
- (ORK_NULLABLE ORKStep *)stepWithIdentifier:(NSString *)identifier;

/**
 Returns the progress of the current step.
 
 The task view controller can display the progress (step number
 out of the total number of steps) in the navigation bar during a task. Implement
 this method to control what is displayed.
 
 If this method is not implemented, the progress label will not appear.
 If the returned progress has a count of 0, progress will not be displayed.

 
 @param step            Reference step.
 @param result  Snapshot of the current set of results, for context.
 
 @return Returns the current step's index and the total number of steps in the task.
 */
- (ORKTaskProgress)progressOfCurrentStep:(ORKStep *)step withResult:(ORKTaskResult *)result;

/**
 Set of `HKObjectType` to request for reading from HealthKit during this task (read-only).
 
 Return the set of HealthKit types that steps in this task need to be able to
 read. After the last of the initial instruction steps, the task view controller
 will request access to these HealthKit types.
 
 A sensible implementation of this method is to scan the steps in the task
 and collate the HealthKit types requested by each active step, or question or
 form step with a Health answer format, and then add any additional types known
 to be required.
 `ORKOrderedTask` provides an implementation of this method which does this.
 */
@property (nonatomic, copy, readonly, ORK_NULLABLE) NSSet *requestedHealthKitTypesForReading;


/**
 Set of `HKObjectType` which would ideally be written to HealthKit during this task.
 
 The requested HealthKit types for writing can be returned by an extended task,
 to request write access to these HealthKit types together with the read access
 requested by the task view controller with `requestedHealthKitTypesForReading`.
 
 See also: `requestedHealthKitTypesForReading`
 */
@property (nonatomic, copy, readonly, ORK_NULLABLE) NSSet *requestedHealthKitTypesForWriting;

/**
 The set of permissions requested by this task.
 
 By default, on `ORKOrderedTask`, these permissions are collected from the
 recorder configurations on the active steps in the task.
 */
@property (nonatomic, readonly) ORKPermissionMask requestedPermissions;

/**
 A Boolean value indicating whether this task involves spoken audio prompts (read-only).
 
 If true, the shared `AVAudioSession` will be configured for playback in the background.
 The audio `UIBackgroundMode` must be set in the application's Info.plist
 for this to be effective.
 
 The default implementation of this property looks for active steps which have
 audio prompts or countdown enabled, and returns `YES` if such steps exist in
 the task.
 */
@property (nonatomic, readonly) BOOL providesBackgroundAudioPrompts;


@end

ORK_ASSUME_NONNULL_END

